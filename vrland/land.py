# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_landscape.ipynb.

# %% auto 0
__all__ = ['generate_grid', 'interpolate_landscape', 'foo']

# %% ../nbs/01_landscape.ipynb 9
def generate_grid(dataframe, param_dict, auto = True, nticks = 48,
    d1min=None, d1max=None, d1tick=None, d2min=None, d2max=None, d2tick=None):

    import numpy as np

    if auto == False:
        manual_arg = np.array([d1min, d1max, d1tick, d2min, d2max, d2tick])

        #Validate manual arguments:
        if manual_arg.dtype.kind in set('buifc'):
            range1 = np.ptp(manual_arg[0:2])
            range2 = np.ptp(manual_arg[3:5])
            print(range1, range2)
            if abs(d1tick)!=d1tick or abs(d2tick)!=d2tick:
                print("WARNING: Only absolute values for the ticks are allowed!")
                print("--> Making values absolute")
                d1tick = abs(d1tick)
                d2tick = abs(d2tick)
            if manual_arg[0]<manual_arg[1] and manual_arg[2]<range1 and manual_arg[3]<manual_arg[4] and manual_arg[5]<range2:
                print("u may pass")
                land_grid = np.mgrid[d1min:d1max:d1tick, d2min:d2max:d2tick]
            else:
                print("messed up, auto values will be computed")
                auto = True
        else:
            print("messed up, auto values will be computed")
            auto = True
    
    if auto == True:
        print("Automated grid computation")
        d1tick = np.ptp(dataframe[param_dict["dim_names"][0]])/nticks
        d2tick = np.ptp(dataframe[param_dict["dim_names"][1]])/nticks
        land_grid = np.mgrid[
            dataframe[param_dict["dim_names"][0]].min()-3*d1tick:dataframe[param_dict["dim_names"][0]].max()+3*d1tick:d1tick,
            dataframe[param_dict["dim_names"][1]].min()-3*d2tick:dataframe[param_dict["dim_names"][1]].max()+3*d2tick:d2tick
            ]
    param_dict["grids"] = land_grid
    print("Added grids to parameter dictionary")

    return param_dict

# %% ../nbs/01_landscape.ipynb 12
def interpolate_landscape(dataframe, param_dict, trim = True):

    rbfi = Rbf(
            dataframe[param_dict["dim_names"][0]], 
            dataframe[param_dict["dim_names"][1]], 
            dataframe["VR"], 
            smooth=1, kernel = "thin_plate_spline")
    di = rbfi(param_dict["grids"][0], param_dict["grids"][1])

    if trim == True:
        # Change all values on interpolated grid that go above the max height in data
        di[di>(round(dataframe["VR"].max(),2)+0.06)] = None

    return di


# %% ../nbs/01_landscape.ipynb 15
#| export


# %% ../nbs/01_landscape.ipynb 16
def foo(): pass
