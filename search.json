[
  {
    "objectID": "score.html",
    "href": "score.html",
    "title": "VR score",
    "section": "",
    "text": "Load Cell x Metadata dataset, where the columns must contain a two-dimensional embedding, sample/condition and cluster metadata, as well as cellular pluripotency and trancriptomic rate of change metrics.\nFor the later two, we suggest using CCAT and RNA velocity vector lengths respectively.\nAdditional metadata layers, such as cell-cycle labels or key gene expression values, can also be added to the dataset and used for annotating the resulting landscapes in later steps, but they will not be used for the computation of VR scores.\n\n\nData from Qin & Cardoso Rodriguez et al. 2023.\n\nbase_dir = os.path.dirname(sys.path[0])\ninput_dir = f\"{base_dir}/data/input\"\noutput_dir = f\"{base_dir}/data/output\"\n\nRelevant information and computation parameters are stored as a dictionary.\n\nparam_dict = {\n    \"input_csv\":\"md_QinCardoso23.csv\",\n    \"dim_names\":[\"phate1\",\"phate2\"],\n    \"potency\":\"CCAT\",\n    \"dynamic\":\"velocity_length\",\n    \"cluster\":\"curatedCLUST\",\n    \"cluster_colours\":{\n        \"TA 1\":\"#FF99CC\",\n        \"Goblet / DCS\":\"#CC9900\",\n        \"Late Enterocyte\":\"#006600\",\n        \"proCSC\":\"#000099\",\n        \"Early Enterocyte\":\"#00FF99\",\n        \"revCSC\":\"#CC0000\",\n        \"ER Stress\":\"#CC00FF\",\n        \"CSC\":\"#6666FF\",\n        \"TA 2\":\"#FF6666\"\n        },\n    \"condition\":\"condition\"\n}\n\n\ncell_data = pd.read_csv(f\"{input_dir}/{param_dict['input_csv']}\")\ncell_data\n\n\n\n\n\n\n\n\nphate1\nphate2\nCCAT\nvelocity_length\nA\nK\nP\nWENR\nmac\nfib\ncuratedCLUST\nOWNsig_stemO_UCell\nOWNsig_stemS_UCell\ncondition\n\n\n\n\n0\n-0.003110\n-0.003080\n0.274730\n186.242097\n0\n0\n0\n0\n0\n0\nTA 1\n0.000000\n0.221648\nWT\n\n\n1\n0.024983\n0.029213\n0.233824\n152.058837\n0\n0\n0\n0\n0\n0\nGoblet / DCS\n0.000000\n0.122389\nWT\n\n\n2\n0.037142\n0.007396\n0.195300\n164.789267\n0\n0\n0\n0\n0\n0\nLate Enterocyte\n0.000000\n0.155778\nWT\n\n\n3\n-0.021990\n0.000884\n0.359556\n221.681973\n0\n0\n0\n0\n0\n0\nproCSC\n0.013370\n0.085037\nWT\n\n\n4\n0.041909\n0.035762\n0.230588\n208.885837\n0\n0\n0\n0\n0\n0\nLate Enterocyte\n0.000000\n0.058852\nWT\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5896\n-0.003300\n-0.006133\n0.361533\n197.806256\n0\n0\n0\n1\n0\n0\nTA 1\n0.179889\n0.337778\nWENR\n\n\n5897\n-0.028562\n0.010894\n0.443155\n145.233683\n0\n0\n0\n1\n0\n0\nproCSC\n0.663185\n0.256611\nWENR\n\n\n5898\n-0.002911\n-0.009425\n0.392001\n188.500721\n0\n0\n0\n1\n0\n0\nCSC\n0.136074\n0.283296\nWENR\n\n\n5899\n-0.024535\n0.002836\n0.441813\n114.664223\n0\n0\n0\n1\n0\n0\nproCSC\n0.298593\n0.203278\nWENR\n\n\n5900\n-0.013252\n0.004670\n0.434362\n191.966684\n0\n0\n0\n1\n0\n0\nrevCSC\n0.512222\n0.388148\nWENR\n\n\n\n\n5901 rows × 14 columns\n\n\n\n\nfig, axs = plt.subplots(2,2)\nfig.suptitle(\"Pluripotency and transcriptomic change on 2D space\")\naxs[0,0].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]],\n    c=cell_data[param_dict[\"cluster\"]].map(param_dict[\"cluster_colours\"]))\naxs[0,1].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]])\naxs[1,0].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]],\n    c=cell_data[param_dict[\"potency\"]], cmap=\"inferno\")\naxs[1,1].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]],\n    c=cell_data[param_dict[\"dynamic\"]], cmap=\"inferno\")\n\n&lt;matplotlib.collections.PathCollection&gt;"
  },
  {
    "objectID": "score.html#example-data-crc-organoids",
    "href": "score.html#example-data-crc-organoids",
    "title": "VR score",
    "section": "",
    "text": "Data from Qin & Cardoso Rodriguez et al. 2023.\n\nbase_dir = os.path.dirname(sys.path[0])\ninput_dir = f\"{base_dir}/data/input\"\noutput_dir = f\"{base_dir}/data/output\"\n\nRelevant information and computation parameters are stored as a dictionary.\n\nparam_dict = {\n    \"input_csv\":\"md_QinCardoso23.csv\",\n    \"dim_names\":[\"phate1\",\"phate2\"],\n    \"potency\":\"CCAT\",\n    \"dynamic\":\"velocity_length\",\n    \"cluster\":\"curatedCLUST\",\n    \"cluster_colours\":{\n        \"TA 1\":\"#FF99CC\",\n        \"Goblet / DCS\":\"#CC9900\",\n        \"Late Enterocyte\":\"#006600\",\n        \"proCSC\":\"#000099\",\n        \"Early Enterocyte\":\"#00FF99\",\n        \"revCSC\":\"#CC0000\",\n        \"ER Stress\":\"#CC00FF\",\n        \"CSC\":\"#6666FF\",\n        \"TA 2\":\"#FF6666\"\n        },\n    \"condition\":\"condition\"\n}\n\n\ncell_data = pd.read_csv(f\"{input_dir}/{param_dict['input_csv']}\")\ncell_data\n\n\n\n\n\n\n\n\nphate1\nphate2\nCCAT\nvelocity_length\nA\nK\nP\nWENR\nmac\nfib\ncuratedCLUST\nOWNsig_stemO_UCell\nOWNsig_stemS_UCell\ncondition\n\n\n\n\n0\n-0.003110\n-0.003080\n0.274730\n186.242097\n0\n0\n0\n0\n0\n0\nTA 1\n0.000000\n0.221648\nWT\n\n\n1\n0.024983\n0.029213\n0.233824\n152.058837\n0\n0\n0\n0\n0\n0\nGoblet / DCS\n0.000000\n0.122389\nWT\n\n\n2\n0.037142\n0.007396\n0.195300\n164.789267\n0\n0\n0\n0\n0\n0\nLate Enterocyte\n0.000000\n0.155778\nWT\n\n\n3\n-0.021990\n0.000884\n0.359556\n221.681973\n0\n0\n0\n0\n0\n0\nproCSC\n0.013370\n0.085037\nWT\n\n\n4\n0.041909\n0.035762\n0.230588\n208.885837\n0\n0\n0\n0\n0\n0\nLate Enterocyte\n0.000000\n0.058852\nWT\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5896\n-0.003300\n-0.006133\n0.361533\n197.806256\n0\n0\n0\n1\n0\n0\nTA 1\n0.179889\n0.337778\nWENR\n\n\n5897\n-0.028562\n0.010894\n0.443155\n145.233683\n0\n0\n0\n1\n0\n0\nproCSC\n0.663185\n0.256611\nWENR\n\n\n5898\n-0.002911\n-0.009425\n0.392001\n188.500721\n0\n0\n0\n1\n0\n0\nCSC\n0.136074\n0.283296\nWENR\n\n\n5899\n-0.024535\n0.002836\n0.441813\n114.664223\n0\n0\n0\n1\n0\n0\nproCSC\n0.298593\n0.203278\nWENR\n\n\n5900\n-0.013252\n0.004670\n0.434362\n191.966684\n0\n0\n0\n1\n0\n0\nrevCSC\n0.512222\n0.388148\nWENR\n\n\n\n\n5901 rows × 14 columns\n\n\n\n\nfig, axs = plt.subplots(2,2)\nfig.suptitle(\"Pluripotency and transcriptomic change on 2D space\")\naxs[0,0].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]],\n    c=cell_data[param_dict[\"cluster\"]].map(param_dict[\"cluster_colours\"]))\naxs[0,1].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]])\naxs[1,0].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]],\n    c=cell_data[param_dict[\"potency\"]], cmap=\"inferno\")\naxs[1,1].scatter(\n    cell_data[param_dict[\"dim_names\"][0]],\n    cell_data[param_dict[\"dim_names\"][1]],\n    c=cell_data[param_dict[\"dynamic\"]], cmap=\"inferno\")\n\n&lt;matplotlib.collections.PathCollection&gt;"
  },
  {
    "objectID": "vrland_app.html",
    "href": "vrland_app.html",
    "title": "VRland App",
    "section": "",
    "text": "pn.extension(comms=\"ipywidgets\")\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nData\nLoad Cell x Metadata dataset, where the columns must contain sample/condition and cluster metadata, as well as cellular pluripotency and trancriptomic rate of change metrics.\nFor the later two, we suggest using CCAT and RNA velocity vector lengths respectively.\nAdditional metadata layers, such as cell-cycle labels or key gene expression values, can also be added to the dataset and used for annotating the resulting landscapes in later steps, but they will not be used for the computation of VR scores.\n\nsource\n\nfoo\n\n foo ()\n\n\n# test_eq(say_hi(\"Jeremy\"), \"Hi Jeremy!\")"
  },
  {
    "objectID": "landscape.html",
    "href": "landscape.html",
    "title": "Landscape projection",
    "section": "",
    "text": "# This ensures Plotly output works in multiple places:\n# plotly_mimetype: VS Code notebook UI\n# notebook: \"Jupyter: Export to HTML\" command in VS Code\n# See https://plotly.com/python/renderers/#multiple-renderers\npio.renderers.default = \"plotly_mimetype+notebook\"\n\n\nbase_dir = os.path.dirname(sys.path[0])\ndata_dir = f\"{base_dir}/data/output\"\n\n\nwith open(f\"{data_dir}/param_dict.json\", \"r\") as param_json:\n    param_dict = json.load(param_json)\n\n\nparam_dict\n\n{'input_csv': 'md_QinCardoso23.csv',\n 'dim_names': ['phate1', 'phate2'],\n 'potency': 'CCAT',\n 'dynamic': 'inverse_vvl',\n 'cluster': 'curatedCLUST',\n 'cluster_colours': {'TA 1': '#FF99CC',\n  'Goblet / DCS': '#CC9900',\n  'Late Enterocyte': '#006600',\n  'proCSC': '#000099',\n  'Early Enterocyte': '#00FF99',\n  'revCSC': '#CC0000',\n  'ER Stress': '#CC00FF',\n  'CSC': '#6666FF',\n  'TA 2': '#FF6666'},\n 'condition': 'condition',\n 'scores_csv': 'vr_QinCardoso23.csv'}\n\n\n\nscore_data = pd.read_csv(f\"{data_dir}/{param_dict['scores_csv']}\")\n\n\nscore_data\n\n\n\n\n\n\n\n\nphate1\nphate2\nCCAT\nvelocity_length\nA\nK\nP\nWENR\nmac\nfib\n...\nOWNsig_stemS_UCell\ncondition\ninverse_vvl\ndist\ndeg\ndist_scaled\ninv_deg_scaled\npotency_med\ndynamic_med\nVR\n\n\n\n\n0\n-0.003110\n-0.003080\n0.339365\n186.242097\n0\n0\n0\n0\n0\n0\n...\n0.221648\nWT\n0.147660\n0.006520\n8\n0.095761\n0.312500\n0.418507\n0.062690\n0.377256\n\n\n1\n0.024983\n0.029213\n0.217284\n152.058837\n0\n0\n0\n0\n0\n0\n...\n0.122389\nWT\n0.231605\n0.017569\n6\n0.059681\n0.666667\n0.249275\n0.113152\n0.225022\n\n\n2\n0.037142\n0.007396\n0.102314\n164.789267\n0\n0\n0\n0\n0\n0\n...\n0.155778\nWT\n0.196273\n0.019348\n6\n0.226228\n0.714286\n0.220369\n0.189912\n0.202629\n\n\n3\n-0.021990\n0.000884\n0.592517\n221.681973\n0\n0\n0\n0\n0\n0\n...\n0.085037\nWT\n0.087964\n0.008693\n5\n0.095699\n1.000000\n0.680724\n0.069009\n0.613312\n\n\n4\n0.041909\n0.035762\n0.207627\n208.885837\n0\n0\n0\n0\n0\n0\n...\n0.058852\nWT\n0.107182\n0.047344\n5\n0.920014\n1.000000\n0.220369\n0.189912\n0.215805\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5896\n-0.003300\n-0.006133\n0.598417\n197.806256\n0\n0\n0\n1\n0\n0\n...\n0.337778\nWENR\n0.125830\n0.005085\n5\n0.009114\n1.000000\n0.690199\n0.098587\n0.621269\n\n\n5897\n-0.028562\n0.010894\n0.842009\n145.233683\n0\n0\n0\n1\n0\n0\n...\n0.256611\nWENR\n0.253098\n0.008261\n5\n0.080657\n1.000000\n0.779294\n0.210717\n0.703064\n\n\n5898\n-0.002911\n-0.009425\n0.689346\n188.500721\n0\n0\n0\n1\n0\n0\n...\n0.283296\nWENR\n0.143186\n0.007716\n5\n0.129462\n1.000000\n0.724684\n0.164599\n0.654346\n\n\n5899\n-0.024535\n0.002836\n0.838003\n114.664223\n0\n0\n0\n1\n0\n0\n...\n0.203278\nWENR\n0.380759\n0.007152\n6\n0.042140\n0.694444\n0.779294\n0.210717\n0.702252\n\n\n5900\n-0.013252\n0.004670\n0.815766\n191.966684\n0\n0\n0\n1\n0\n0\n...\n0.388148\nWENR\n0.136525\n0.015421\n7\n0.749223\n0.510204\n0.696763\n0.105690\n0.635005\n\n\n\n\n5901 rows × 22 columns\n\n\n\n\nsource\n\ngenerate_grid\n\n generate_grid (dataframe, param_dict, auto=True, nticks=48, d1min=None,\n                d1max=None, d1tick=None, d2min=None, d2max=None,\n                d2tick=None)\n\n\nparam_dict = generate_grid(score_data, param_dict, auto=True)\n\nAutomated grid computation\nAdded grids to parameter dictionary\n\n\nEventually, setting condition to None in param_dict will signify that vr scores are computed on the whole dataset.\nFor now though, we assume that they are always computed on a per sample/condition basis, and thus several landscapes need to be generated.\n\nsource\n\n\ninterpolate_landscape\n\n interpolate_landscape (dataframe, param_dict, trim=True)\n\n\nparam_dict\n\n{'input_csv': 'md_QinCardoso23.csv',\n 'dim_names': ['phate1', 'phate2'],\n 'potency': 'CCAT',\n 'dynamic': 'inverse_vvl',\n 'cluster': 'curatedCLUST',\n 'cluster_colours': {'TA 1': '#FF99CC',\n  'Goblet / DCS': '#CC9900',\n  'Late Enterocyte': '#006600',\n  'proCSC': '#000099',\n  'Early Enterocyte': '#00FF99',\n  'revCSC': '#CC0000',\n  'ER Stress': '#CC00FF',\n  'CSC': '#6666FF',\n  'TA 2': '#FF6666'},\n 'condition': 'condition',\n 'scores_csv': 'vr_QinCardoso23.csv',\n 'grids': array([[[-0.03413235, -0.03413235, -0.03413235, ..., -0.03413235,\n          -0.03413235, -0.03413235],\n         [-0.03262914, -0.03262914, -0.03262914, ..., -0.03262914,\n          -0.03262914, -0.03262914],\n         [-0.03112593, -0.03112593, -0.03112593, ..., -0.03112593,\n          -0.03112593, -0.03112593],\n         ...,\n         [ 0.04253158,  0.04253158,  0.04253158, ...,  0.04253158,\n           0.04253158,  0.04253158],\n         [ 0.04403479,  0.04403479,  0.04403479, ...,  0.04403479,\n           0.04403479,  0.04403479],\n         [ 0.045538  ,  0.045538  ,  0.045538  , ...,  0.045538  ,\n           0.045538  ,  0.045538  ]],\n \n        [[-0.0224318 , -0.0212241 , -0.02001639, ...,  0.03916118,\n           0.04036889,  0.04157659],\n         [-0.0224318 , -0.0212241 , -0.02001639, ...,  0.03916118,\n           0.04036889,  0.04157659],\n         [-0.0224318 , -0.0212241 , -0.02001639, ...,  0.03916118,\n           0.04036889,  0.04157659],\n         ...,\n         [-0.0224318 , -0.0212241 , -0.02001639, ...,  0.03916118,\n           0.04036889,  0.04157659],\n         [-0.0224318 , -0.0212241 , -0.02001639, ...,  0.03916118,\n           0.04036889,  0.04157659],\n         [-0.0224318 , -0.0212241 , -0.02001639, ...,  0.03916118,\n           0.04036889,  0.04157659]]])}\n\n\n\n# Colour and axes scales should be set globally here\nvr_max = round(score_data[\"VR\"].max(),2)+0.02\nvr_min = round(score_data[\"VR\"].min(),2)-0.02\n\nfor i in score_data[param_dict[\"condition\"]].unique():\n    print(i)\n    land_data = score_data.loc[score_data[param_dict[\"condition\"]]==i]\n    print(land_data.shape)\n\n    vr_land = interpolate_landscape(land_data, param_dict)\n\n    fig = go.Figure(\n            data=[go.Surface(\n                x=param_dict[\"grids\"][0],y=param_dict[\"grids\"][1],z=vr_land\n            )])\n    fig.update_traces(colorscale=[[0,\"blue\"],[0.25,\"green\"],[0.5,\"yellow\"],[0.75,\"#5f3316\"],[0.85,\"#513b1b\"],[1,\"white\"]],cmax=vr_max, cmin=vr_min)\n    fig.add_scatter3d(\n        x=land_data[param_dict[\"dim_names\"][0]],\n        y=land_data[param_dict[\"dim_names\"][1]], \n        z=((0.1*land_data[param_dict[\"potency\"]]+0.9*land_data[\"VR\"])+0.012),\n        mode=\"markers\",\n        marker=dict(\n            size=4, \n            color=land_data[param_dict[\"cluster\"]].map(param_dict[\"cluster_colours\"]),\n            opacity=0.42,\n            # line=dict(width=2,\n            #     color=\"darkgrey\")\n            )\n        )\n    fig.update_layout(\n        title=None,\n        template = \"simple_white\",\n        scene = dict(\n            xaxis = dict(nticks=5,title=\"\"),\n            yaxis = dict(nticks=5, title = \"\"),\n            zaxis = dict(nticks=5, range=[vr_min,vr_max], title=\"\")\n            ),\n        autosize=True,\n        width=1000, height=1000,\n        margin=dict(l=0, r=0, b=0, t=0),\n        scene_aspectmode=\"cube\",\n        scene_camera=dict(\n            up=dict(x=0, y=0, z=1),\n            center=dict(x=0, y=0, z=0),\n            eye=dict(x=1.5, y=1, z=2)\n        )\n        )\n    fig.show()\n\nWT\n(1511, 22)\nCRC\n(1860, 22)\nWTfib\n(1139, 22)\nWENR\n(1391, 22)\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\nsource\n\n\nfoo\n\n foo ()\n\n\n# test_eq(say_hi(\"Jeremy\"), \"Hi Jeremy!\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VRland",
    "section": "",
    "text": "This file will become the README and documentation index for the upcoming standalone implementation of the Valley-Ridge score landscapes.\nVRland allows to visualise single-cell differentiation processes on a Waddington-like landscape by combining the global cellular relationships captured by PHATE as ‘longitude and latitude’ axes, with a Valley-Ridge (VR) score based on cellular pluripotency and RNA velocity. The resulting VR landscape altitude captures the differentiation potential of a cell population, with the valley-ridge topology delineating local plasticity.\nFor an example of the current implementation as a single Jupyter Notebook, please see the work on Qin & Cardoso Rodriguez et al. 2023 and it’s associated GitHub repository (VR score and landscape generation can be found within the Figure 7 directory).\nThis repository contains a development version of VRland where additional distance metrics to determine the Ridge component will be explored.\nUltimately, the aim is to deploy this notebook-based tool as an interactive web-app."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "VRland",
    "section": "How to use",
    "text": "How to use\nA brief tutorial will be coming soon…\nFor now refer to the individual score and landscape notebooks in this repo, or to the work on Qin & Cardoso Rodriguez et al. 2023 and it’s associated GitHub repository.\n\nInstall\nCurrently, the pre-release VRland tool can be used by cloning its GitHub repository and locally installing the package from the repo root directory with:\npip install -e \".[dev]\"    \nIt will eventually be available on Python Package Index."
  }
]